version:           2.1

jobs:
  test:
    machine:
    image:         circleci/classic:edge
    steps:
      - checkout
      - run:
          name:    Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name:    docker-compose up --build -d
          command: docker-compose up --build -d
      - run:       sleep 30
      - run:
          name:    docker-compose run back rails db:create
          command: docker-compose run back rails db:create
      - run:
          name:    docker-compose run back rails db:migrate
          command: docker-compose run back rails db:migrate
      - run:
          name:    docker-compose run back bundle exec rspec spec
          command: docker-compose run back bundle exec rspec spec
      - run:
          name:    docker-compose down
          command: docker-compose down

workflows:
  version:         2
  workflows:
    jobs:
      - test


# orbs:
#   aws-ecr:       circleci/aws-ecr@6.0.0
#   aws-ecs:       circleci/aws-ecs@1.2.0
#
# workflows:
#   build-and-deploy::
#     jobs:
#       - aws-ecr/build-and-push-image:
#           region: AWS_REGION
#           account-url: AWS_ECR_ACCOUNT_URL
#           repo:  '${MY_APP_PREFIX}-sample'
#           path:  '/back'
#           tag:   "${CIRCLE_SHA1}"
#
#       - aws-ecr/build-and-push-image:
#           account-url: AWS_ECR_ACCOUNT_URL
#           aws-access-key-id: AWS_ACCESS_KEY_ID
#           aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#           create-repo: true
#           dockerfile: Dockerfile
#           path:  .
#           region: AWS_REGION
#           repo:  circleci-ecr-orb-demo
#           tag:   "$CIRCLE_SHA1"
#
#       - aws-ecs/deploy-service-update:
#           requires:
#             - aws-ecr/build-and-push-image
#           family: '${MY_APP_PREFIX}-task'
#           cluster-name: '${MY_APP_PREFIX}-cluster'
#           service-name: '${MY_APP_PREFIX}-service'
#           container-image-name-updates: 'container=${MY_APP_PREFIX}-container,tag=${CIRCLE_SHA1}'
